// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wellcome.Database;

#nullable disable

namespace Wellcome.Database.Migrations
{
    [DbContext(typeof(WellcomeContext))]
    partial class WellcomeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Wellcome.DataModel.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            City = "Soisy",
                            Country = "France",
                            Latitude = 48.988506000000001,
                            Longitude = 2.299731,
                            PostalCode = "95230",
                            Street = "11 rue des dures terres"
                        });
                });

            modelBuilder.Entity("Wellcome.DataModel.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Contact");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FirstName = "Rayhane",
                            LastName = "JEBBARI",
                            Mail = "jebray@gmail.com",
                            Phone = "0668319888"
                        },
                        new
                        {
                            ID = 2,
                            FirstName = "Jialei",
                            LastName = "SUN",
                            Mail = "sunjia@gmail.com",
                            Phone = "0668315554"
                        });
                });

            modelBuilder.Entity("Wellcome.DataModel.FavoriteHost", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "HostId");

                    b.HasIndex("HostId");

                    b.ToTable("FavoriteHosts");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            HostId = 1
                        });
                });

            modelBuilder.Entity("Wellcome.DataModel.Feedback", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Notation")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Notation = 4,
                            Remark = "Good host !",
                            TimeStamp = new DateTime(2022, 2, 8, 17, 48, 33, 82, DateTimeKind.Local).AddTicks(8099),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Wellcome.DataModel.Host", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HostConfigurationID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TravelersConfigurationID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("HostConfigurationID");

                    b.HasIndex("TravelersConfigurationID");

                    b.HasIndex("UserId");

                    b.ToTable("Host");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddressID = 1,
                            Description = "Description",
                            HostConfigurationID = 1,
                            Title = "Title",
                            TravelersConfigurationID = 1,
                            UserId = 1,
                            Uuid = "a6b9e0f5-0155-485c-b5c3-a55f227ff053"
                        });
                });

            modelBuilder.Entity("Wellcome.DataModel.HostConfiguration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Beds")
                        .HasColumnType("int");

                    b.Property<string>("Equipments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("HostConfiguration");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Bathrooms = 1,
                            Beds = 2,
                            Equipments = "Machine",
                            Rooms = 3
                        });
                });

            modelBuilder.Entity("Wellcome.DataModel.HostPicture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("HostId")
                        .IsUnique();

                    b.ToTable("HostPicture");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            HostId = 1,
                            Path = "/Images/corporate_housing_newyork1.jpg"
                        });
                });

            modelBuilder.Entity("Wellcome.DataModel.HostReservation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "HostId");

                    b.HasIndex("HostId");

                    b.ToTable("HostReservation");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            HostId = 1,
                            Message = "Hello, I want to stay !",
                            Phone = "0668319800"
                        });
                });

            modelBuilder.Entity("Wellcome.DataModel.ProfilePicture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfilePicture");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Path = "/Images/Seth_Luty_Profile_Picture.jpg",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Wellcome.DataModel.TravelersConfiguration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<int>("Babies")
                        .HasColumnType("int");

                    b.Property<int>("Childs")
                        .HasColumnType("int");

                    b.Property<int>("Pets")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("TravelersConfiguration");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Adults = 2,
                            Babies = 2,
                            Childs = 0,
                            Pets = 0
                        });
                });

            modelBuilder.Entity("Wellcome.DataModel.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ContactId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Age = 31,
                            ContactId = 1,
                            Description = "I like meet new people !",
                            Gender = "Male",
                            Language = "French",
                            Password = "password",
                            Profession = "It Engineer",
                            Uuid = "2c02b8ef-8669-4a6b-9f40-8b3b3adc3843"
                        },
                        new
                        {
                            ID = 2,
                            Age = 31,
                            ContactId = 2,
                            Description = "I like meet new people !",
                            Gender = "Male",
                            Language = "French",
                            Password = "password",
                            Profession = "It Engineer",
                            Uuid = "36a159df-82d3-4236-8422-05cb6b38eb26"
                        });
                });

            modelBuilder.Entity("Wellcome.DataModel.FavoriteHost", b =>
                {
                    b.HasOne("Wellcome.DataModel.Host", "Host")
                        .WithMany("FavoriteHosts")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wellcome.DataModel.User", "User")
                        .WithMany("FavoriteHosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wellcome.DataModel.Feedback", b =>
                {
                    b.HasOne("Wellcome.DataModel.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wellcome.DataModel.Host", b =>
                {
                    b.HasOne("Wellcome.DataModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wellcome.DataModel.HostConfiguration", "Configuration")
                        .WithMany()
                        .HasForeignKey("HostConfigurationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wellcome.DataModel.TravelersConfiguration", "Travelers")
                        .WithMany()
                        .HasForeignKey("TravelersConfigurationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wellcome.DataModel.User", "User")
                        .WithMany("Hosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Configuration");

                    b.Navigation("Travelers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wellcome.DataModel.HostPicture", b =>
                {
                    b.HasOne("Wellcome.DataModel.Host", "Host")
                        .WithOne("HostPicture")
                        .HasForeignKey("Wellcome.DataModel.HostPicture", "HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Wellcome.DataModel.HostReservation", b =>
                {
                    b.HasOne("Wellcome.DataModel.Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wellcome.DataModel.User", "User")
                        .WithMany("HostReservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wellcome.DataModel.ProfilePicture", b =>
                {
                    b.HasOne("Wellcome.DataModel.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("Wellcome.DataModel.ProfilePicture", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wellcome.DataModel.User", b =>
                {
                    b.HasOne("Wellcome.DataModel.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Wellcome.DataModel.Host", b =>
                {
                    b.Navigation("FavoriteHosts");

                    b.Navigation("HostPicture")
                        .IsRequired();
                });

            modelBuilder.Entity("Wellcome.DataModel.User", b =>
                {
                    b.Navigation("FavoriteHosts");

                    b.Navigation("Feedbacks");

                    b.Navigation("HostReservations");

                    b.Navigation("Hosts");

                    b.Navigation("ProfilePicture")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
